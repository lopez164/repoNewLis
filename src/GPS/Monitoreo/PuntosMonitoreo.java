/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GPS.Monitoreo;

import GPS.PuntosGps.Carro;
import GPS.PuntosGps.PuntoDeRecorrido;
import GPS.wayPoints.MyWayPoint;
import GPS.wayPoints.WayPointRenderer;
import com.conf.Inicio;
import com.obj.CCarros;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.event.MouseInputListener;
import org.jxmapviewer.*;
import org.jxmapviewer.input.PanKeyListener;
import org.jxmapviewer.input.PanMouseInputListener;
import org.jxmapviewer.input.ZoomMouseWheelListenerCenter;
import org.jxmapviewer.painter.Painter;
import org.jxmapviewer.viewer.DefaultTileFactory;
import org.jxmapviewer.viewer.GeoPosition;
import org.jxmapviewer.viewer.TileFactoryInfo;
import org.jxmapviewer.viewer.WaypointPainter;

/**
 *
 * @author Usuario
 */
public class PuntosMonitoreo extends javax.swing.JInternalFrame {

    public boolean verificado;

    Carro carro = null;
    List<Timer> listDeTemporrizadores;

//    Set<MyWayPoint> listaDeClientes = new HashSet<>();
//    Set<MyWayPoint> listaDePuntosRecorridos = new HashSet<>();
//    Set<MyWayPoint> listaDePuntosCarrosConGps = new HashSet<>();

    Set<MyWayPoint> listaWpPuntosRecorridos= new HashSet<>();
    Set<MyWayPoint> listaWpClientes= new HashSet<>();
    Set<MyWayPoint> listaWpCarros= new HashSet<>();
    Set<MyWayPoint> listaDeTodosWP= new HashSet<>();

    List<Painter<JXMapViewer>> painters;

    // List<Carro> listadeTodosLosCarros;
    List<Carro> listadeDispositivosGps;

    List<Carro> listadeCarros;

    List<PuntoDeRecorrido> listadeLineas = new ArrayList<>();
    String placa;

    GeoPosition centro;
    GeoPosition puntoCliente;
    private List<ImageIcon> listaDeIconos;

    String fechaInicial;
    String fechaFinal;
    String fechaDistribucion;

    Inicio ini;
    Timer timer;

    private Connection connServidorRuta;
    private Connection connServidorGps;

    public boolean ocupado = false;

//private FResidentes residente = (FResidentes)this.getParent();//
    /**
     * Creates new form FBuscar2
     *
     * @param ini
     */
    public PuntosMonitoreo(Inicio ini) {
        this.ini = ini;
        initComponents();
        //this.ini.setListaDeCarrosPropios();

        // Obteniendo la fecha actual del sistema.
        Date fecha = new Date(Calendar.getInstance().getTimeInMillis());
        Calendar calendario = Calendar.getInstance();
        int hora = calendario.getTime().getHours();
        int minuto = calendario.getTime().getMinutes();
        int segundo = calendario.getTime().getSeconds();
        GregorianCalendar gc = new GregorianCalendar();
        long minIni = gc.getTimeInMillis() - ((3600000 * hora) + (60000 * minuto) + (1000 * segundo));
        long minMax = gc.getTimeInMillis();
        jFechaInicial.setDate(new Date(minIni));
        jFechaFinal.setDate(new Date(minMax));
        painters = new ArrayList<Painter<JXMapViewer>>();

        String cadenaDeConexion = String.format("jdbc:mysql://%s/%s?%s%s",
                "190.144.23.186",
                "rutero",
                "useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=America/Bogota",
                "&useSSL=false");
        //connServidorRuta = DriverManager.getConnection(cadenaDeConexion, "luislopez", "jslslpzmjc1212");
        connServidorRuta = ini.getConnRemota();
        // connServidorRuta = ini.getConnRemota();
        cadenaDeConexion = String.format("jdbc:mysql://%s/%s?%s%s",
                "129.151.107.181",
                "traccar",
                "useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=America/Bogota",
                "&useSSL=false");
        //  connServidorGps = DriverManager.getConnection(cadenaDeConexion, "luislopez", "%jslslpzmjC12%");
        
        connServidorGps = ini.getConnGPS();
        init();
        iniciar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMapa = new javax.swing.JPanel();
        jXMapViewer1 = new org.jxmapviewer.JXMapViewer();
        comboMap = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        chkRecorrido = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListaDeCarros = new javax.swing.JList<>();
        txtCoordenadas = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jFechaFinal = new com.toedter.calendar.JDateChooser();
        jFechaInicial = new com.toedter.calendar.JDateChooser();

        setClosable(true);
        setIconifiable(true);
        setTitle("Formulario para Consulta de Rutas, clientes y vehiculos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/aplicacionlogistica/configuracion/imagenes/img16x16/map.png"))); // NOI18N

        jXMapViewer1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jXMapViewer1MouseClicked(evt);
            }
        });

        comboMap.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Virtual Earth", "Open Street MAp", "Hybrid", "Satellite" }));
        comboMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMapActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanel2.setOpaque(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel1.setOpaque(false);

        chkRecorrido.setText("Recorrido");
        chkRecorrido.setEnabled(false);
        chkRecorrido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRecorridoActionPerformed(evt);
            }
        });

        jPanel3.setOpaque(false);

        jListaDeCarros.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListaDeCarros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListaDeCarrosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListaDeCarros);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkRecorrido, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(chkRecorrido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txtCoordenadas.setEditable(false);
        txtCoordenadas.setText("ppp");
        txtCoordenadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCoordenadasActionPerformed(evt);
            }
        });

        jPanel4.setOpaque(false);

        jLabel1.setText("Desde  :");

        jLabel2.setText("Hasta :");

        jFechaFinal.setToolTipText("Seleccionar la fecha ");
        jFechaFinal.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jFechaFinal.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

        jFechaInicial.setToolTipText("Seleccionar la fecha ");
        jFechaInicial.setDateFormatString("yyyy-MM-dd HH:mm:ss");
        jFechaInicial.setFont(new java.awt.Font("Verdana", 0, 10)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jFechaInicial, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                .addComponent(jFechaFinal, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(1, 1, 1)
                .addComponent(jFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jXMapViewer1Layout = new javax.swing.GroupLayout(jXMapViewer1);
        jXMapViewer1.setLayout(jXMapViewer1Layout);
        jXMapViewer1Layout.setHorizontalGroup(
            jXMapViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXMapViewer1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jXMapViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jXMapViewer1Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jXMapViewer1Layout.createSequentialGroup()
                        .addComponent(txtCoordenadas, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 642, Short.MAX_VALUE)
                        .addComponent(comboMap, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jXMapViewer1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jXMapViewer1Layout.setVerticalGroup(
            jXMapViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXMapViewer1Layout.createSequentialGroup()
                .addGroup(jXMapViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCoordenadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(181, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelMapaLayout = new javax.swing.GroupLayout(panelMapa);
        panelMapa.setLayout(panelMapaLayout);
        panelMapaLayout.setHorizontalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXMapViewer1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelMapaLayout.setVerticalGroup(
            panelMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXMapViewer1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(panelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMapa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMapActionPerformed
        TileFactoryInfo info = null;

        int index = comboMap.getSelectedIndex();
        switch (index) {
            case 0:
                info = new VirtualEarthTileFactoryInfo(VirtualEarthTileFactoryInfo.MAP);
                break;
            case 1:
                info = new OSMTileFactoryInfo();
                break;
            case 2:
                info = new VirtualEarthTileFactoryInfo(VirtualEarthTileFactoryInfo.HYBRID);
                break;
            case 3:
                info = new VirtualEarthTileFactoryInfo(VirtualEarthTileFactoryInfo.SATELLITE);
                break;

            default:

                break;

        }

        DefaultTileFactory tileFactory = new DefaultTileFactory(info);
        jXMapViewer1.setTileFactory(tileFactory);

    }//GEN-LAST:event_comboMapActionPerformed

    private void chkRecorridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRecorridoActionPerformed

        if (chkRecorrido.isSelected()) {
            for (Carro carro : listadeDispositivosGps) {
                carro.borrarPuntosDeRecorrido();
            }
            SimpleDateFormat formatter = new SimpleDateFormat("YYYY-MM-dd");
            SimpleDateFormat Formato = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            fechaDistribucion = formatter.format(jFechaInicial.getDate());

            fechaInicial = Formato.format(jFechaInicial.getDate());
            fechaFinal = Formato.format(jFechaFinal.getDate());

            new Thread(new HiloPuntoMonitoreo(this, "mostrarRecorrido", placa)).start();

        } else {

        }
        txtCoordenadas.setText("");
    }//GEN-LAST:event_chkRecorridoActionPerformed

    private void jXMapViewer1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jXMapViewer1MouseClicked
        GeoPosition geoposition = jXMapViewer1.convertPointToGeoPosition(evt.getPoint());
        txtCoordenadas.setText(geoposition.getLatitude() + "," + geoposition.getLongitude());

    }//GEN-LAST:event_jXMapViewer1MouseClicked

    private void jListaDeCarrosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListaDeCarrosMouseClicked
        chkRecorrido.setSelected(false);
         
        GregorianCalendar gc = new GregorianCalendar();
        long minMax = gc.getTimeInMillis();
        jFechaFinal.setDate(new Date(minMax));

        placa = jListaDeCarros.getSelectedValue().toString();

        txtCoordenadas.setText("");

        new Thread(new HiloPuntoMonitoreo(this, "borrarRecorrido", placa)).start();
       
        chkRecorrido.setEnabled(true);


    }//GEN-LAST:event_jListaDeCarrosMouseClicked

    private void txtCoordenadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCoordenadasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCoordenadasActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JCheckBox chkRecorrido;
    private javax.swing.JComboBox<String> comboMap;
    public com.toedter.calendar.JDateChooser jFechaFinal;
    public com.toedter.calendar.JDateChooser jFechaInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JList<String> jListaDeCarros;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    public org.jxmapviewer.JXMapViewer jXMapViewer1;
    private javax.swing.JPanel panelMapa;
    public javax.swing.JTextField txtCoordenadas;
    // End of variables declaration//GEN-END:variables

    private void init() {

        String punto = ini.getGeoPositionCliente();
        String[] coord = punto.split(",");
        puntoCliente = new GeoPosition(Double.parseDouble(coord[0]), Double.parseDouble(coord[1]));

        TileFactoryInfo info = new OSMTileFactoryInfo();
        DefaultTileFactory tileFactory = new DefaultTileFactory(info);
        jXMapViewer1.setTileFactory(tileFactory);
        //GeoPosition geo = new GeoPosition(7.917701, -72.53558);
        jXMapViewer1.setAddressLocation(puntoCliente);
        jXMapViewer1.setZoom(5);
        jXMapViewer1.setSize(getSize());

        // Crear los eventos del mouse
        MouseInputListener ml = new PanMouseInputListener(jXMapViewer1);
        jXMapViewer1.addMouseListener(ml);
        jXMapViewer1.addMouseMotionListener(ml);
        jXMapViewer1.addMouseWheelListener(new ZoomMouseWheelListenerCenter(jXMapViewer1));
        jXMapViewer1.addKeyListener(new PanKeyListener(jXMapViewer1));
        jXMapViewer1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {

                boolean right = SwingUtilities.isRightMouseButton(evt);
                if (right) {
                    JOptionPane.showMessageDialog(jXMapViewer1, "punto de la pantalla" + evt.getLocationOnScreen());
                }
            }
        });

    }

    public void initWayPointsClientes() {
        WaypointPainter<MyWayPoint> wp = new WayPointRenderer();
        wp.setWaypoints(listaWpClientes);
        jXMapViewer1.setOverlayPainter(wp);

        for (MyWayPoint d : listaWpClientes) {
            jXMapViewer1.add(d.getButton());

        }

    }

    private void clearWayPoints() {
        for (MyWayPoint d : listaWpClientes) {
            jXMapViewer1.remove(d.getButton());

        }
        listaWpClientes.clear();
        //initWayPoints();
    }

    private void iniciar() {
//        new Thread(new HiloPuntosGps(this, "setListaDeIconos")).start();

        /* Se genera una lista con los dispositivos asigandos a los carros */
        setListaDeCarros();

        new Thread(new HiloPuntoMonitoreo(this, "setListaDeCarrosConGps")).start();

    }

    public void setListaDeCarros(int uno) {
        ResultSet rst1 = null;
        Statement st = null;
        String sql = "";

        //String fechaDistribucion = "2022-06-21";
        List<CCarros> listaDeVehiculos = new ArrayList<>();
        if (ini.getListaDeVehiculos() == null) {
            ini.setListaDeVehiculos(1);
        }
        sql = "select * from vst_vehiculos where activo=1;";
        if (connServidorRuta != null) {
            try {
                st = connServidorRuta.createStatement();
                rst1 = st.executeQuery(sql);

                while (rst1.next()) {

                    CCarros carro2 = new CCarros(this.ini);

                    carro2.setPlaca(rst1.getString("placa"));
                    carro2.setTipoDeTracccion(1); // 1 corresponde a carro2s
                    carro2.setConductor(rst1.getString("conductor"));
                    carro2.setNombreConductor(rst1.getString("nombreConductor"));
                    carro2.setApellidosConductor(rst1.getString("apellidosConductor"));
                    carro2.setPesoTotalSinCarga(rst1.getDouble("pesoTotalSinCarga"));
                    carro2.setLargoVehiculo(rst1.getDouble("largoVehiculo"));
                    carro2.setAlturaVehiculo(rst1.getDouble("alturaVehiculo"));
                    carro2.setAnchuraVehiculo(rst1.getDouble("anchuraVehiculo"));
                    carro2.setLongitudVehiculo(rst1.getDouble("longitudVehiculo"));
                    carro2.setPesoTotalAutorizado(rst1.getDouble("pesoTotalAutorizado"));
                    carro2.setCapacidadInstalada(rst1.getDouble("capacidadInstalada"));
                    carro2.setIdLineaVehiculo(rst1.getInt("lineaVehiculo"));
                    carro2.setNombreLineaVehiculo(rst1.getString("nombreLineaVehiculo"));
                    carro2.setNombreMarcaDeVehiculo(rst1.getString("nombreMarcaDeVehiculo"));
                    carro2.setTipoVehiculo(rst1.getInt("tipoVehiculo"));
                    carro2.setTipoCarroceria(rst1.getInt("tipoCarroceria"));
                    carro2.setNombreTipoCarroceria(rst1.getString("nombreTipoCarroceria"));
                    carro2.setNombreTipoCombustible(rst1.getString("nombreTipoCombustible"));
                    carro2.setNombreEstadoVehiculo(rst1.getString("nombreEstadoVehiculo"));

                    carro2.setTipoContrato(rst1.getInt("tipoContrato"));
                    carro2.setPropietario(rst1.getString("propietario"));
                    carro2.setTarjetaPropiedad(rst1.getString("tarjetaPropiedad"));
                    carro2.setCantidadLLantas(rst1.getInt("cantidadLLantas"));
                    carro2.setTamanioLlantas(rst1.getString("tamanioLlantas"));
                    carro2.setSerialChasis(rst1.getString("serialChasis"));
                    carro2.setTrailer(rst1.getString("trailer"));
                    carro2.setAgencia(rst1.getInt("agencia"));
                    carro2.setModelo(rst1.getString("modelo"));
                    carro2.setTipoServicio(rst1.getInt("idTipoServicio"));
                    carro2.setSerialMotor(rst1.getString("serialMotor"));
                    carro2.setTipoCombustible(rst1.getInt("idTipoCombustible"));
                    carro2.setKmCambioValvulinaTrasmision(rst1.getInt("kmCambioValvulinaTrasmision"));
                    carro2.setKilometrajeActual(rst1.getInt("kilometrajeActual"));
                    carro2.setKmCambioAceiteMotor(rst1.getInt("kmCambioAceiteMotor"));
                    carro2.setKmCambioValvulinaCaja(rst1.getInt("kmCambioValvulinaCaja"));
                    carro2.setIdLineaVehiculo(rst1.getInt("lineaVehiculo"));
                    carro2.setTipoMime(rst1.getString("tipoMime"));
                    carro2.setActivoVehiculo(rst1.getInt("activo"));
                    carro2.setActivoCarro(rst1.getInt("activo"));

                    System.out.println("Cargando vehiculo de placa  -> " + carro2.getPlaca());

                    listaDeVehiculos.add(carro2);
                    Thread.sleep(10);
                }

                ini.setListaDeVehiculos(listaDeVehiculos);
                rst1.close();
                st.close();
                // con.close();

            } // fin try // fin try
            catch (SQLException | InterruptedException ex) {
                Logger.getLogger(Inicio.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }
        listadeCarros = new ArrayList<>();
        if (listaDeVehiculos != null || listaDeVehiculos.size() > 0) {
            int i = 0;
            for (CCarros veh : listaDeVehiculos) {
                Carro car = new Carro(connServidorRuta, connServidorGps);
                car.setPlaca(veh.getPlaca());
                car.setConductor(veh.getNombreConductor() + " " + veh.getApellidosConductor());
                car.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GPS/icons/truck_32x32.png")));
                car.setFechaDeInicio(fechaInicial);
                car.setFechaFinal(fechaFinal);
                car.setFechaDistribucion(fechaDistribucion);
                listadeCarros.add(car);

            }
        } else {
            JOptionPane.showMessageDialog(PuntosMonitoreo.this, "NO Hay vehiculos asignados", "No hay Vehiculos", JOptionPane.WARNING_MESSAGE);

        }

    }

    public void setListaDeCarros() {

        if (ini.getListaDeCarrosConGps() == null || ini.getListaDeCarrosConGps().isEmpty()) {
            ini.setListaDeCarrosConGps();
        }

        /*Se llena el objeto jlist de los carros con las respectivas placas */
        llenarJlistaVehiculos();

    }

    private void llenarJlistaVehiculos() {
        DefaultListModel modelo = new DefaultListModel();
        for (CCarros car : ini.getListaDeCarrosConGps()) {
            modelo.addElement(car.getPlaca());
        }

        jListaDeCarros.setModel(modelo);

        //new Thread(new HiloPuntoMonitoreo(this, "setIconos")).start();
    }

    private void cargarClientesPorCarro() {
        for (Carro car : listadeCarros) {
            //new Thread(new HiloPuntosGps(this, "cargarClientesPorCarro"), car.getPlaca()).start();
        }
    }

    public List<ImageIcon> getListaDeIconos() {
        return listaDeIconos;
    }

    public void setListaDeIconos(List<ImageIcon> listaDeIconos) {
        this.listaDeIconos = listaDeIconos;
    }

    public void llamarClientesDePlaca() {

        // new Thread(new HiloPuntosGps(this, "delListaDeClientes")).start();
        // new Thread(new HiloPuntosGps(this, "borrarPuntosRecorridos")).start();
        // new Thread(new HiloPuntosGps(this, "delPolyLineas")).start();
        chkRecorrido.setEnabled(false);
        chkRecorrido.setSelected(false);
        // new Thread(new HiloPuntosGps(this, "putWayPointsClientes")).start();

    }

    public void setTemporizadoresDeLOsCArros() {

        try {

            int tiempo =3; // 3 minutos
            for (final Carro car : listadeDispositivosGps) {

                Timer timer = new Timer((tiempo * 60000), new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        new Thread(new HiloPuntoMonitoreo(PuntosMonitoreo.this, "actualizarUltimaPosicion", car)).start();
                        //JOptionPane.showConfirmDialog(PuntosMonitoreo.this, "3 minutps");

                    }
                });

                timer.start();
            }
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
            Logger.getLogger(PuntosMonitoreo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public Connection getConnServidorRuta() {
        return connServidorRuta;
    }

    public void setConnServidorRuta(Connection conn) {
        this.connServidorRuta = conn;
    }

    public Connection getConnServidorGps() {
        return connServidorGps;
    }

    public void setConnServidorGps(Connection connServidorGps) {
        this.connServidorGps = connServidorGps;
    }

}
